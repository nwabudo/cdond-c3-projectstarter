version: 2.1

commands:
    install_ansible:
        description: Install Ansible
        steps:
            - run:
                name: Install Ansible
                command: |
                    python3 -m pip install --user ansible

    install_awscli:
        description: Install AWS CLI v2
        steps:
            - run:
                name: Install AWS CLI v2
                command: |
                    sudo apt install -y tar gzip curl
                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                    unzip awscliv2.zip
                    sudo ./aws/install


    destroy-environment:
        description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
        parameters:
            # Add parameter here
            workflow_id:
                type: string
                default: ${CIRCLE_WORKFLOW_ID:0:7}
        steps:
            - run:
                name: Destroy every environments with current workflow_id
                when: on_fail
                command: |
                    echo "Destroying environment: << parameters.workflow_id >>"
                    aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
                    aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
                    aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>

    revert-migrations:
        description: Revert the last migration if successfully run in the current workflow.
        parameters:
            # Add parameter here
            workflow_id:
                type: string
                default: ${CIRCLE_WORKFLOW_ID:0:7}   
        steps:
            - run:
                name: Revert migrations
                # Add when this will run
                when: on_fail
                command: |
                    # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
                    SUCCESS=$(curl --insecure https://kvdb.io/P2x5LqAaVSoq12YZEFJBor/migration_<< parameters.workflow_id >>)
                    if(( $SUCCESS==1 )); 
                    then
                        cd ~/project/backend
                        npm install
                        # Add revert code here. You can find this in the Getting Started section.
                        npm run migration:revert
                    fi

jobs:
    build-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [frontend-build]
            - run:
                name: Build front-end
                command: |
                    cd frontend
                    npm install
                    npm run build
            - save_cache:
                paths: [frontend/node_modules]
                key: frontend-build

    build-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            - checkout
            - restore_cache:
                keys: [backend-build]
            - run:
                name: Back-end build
                command: |
                    cd backend
                    npm install
                    npm run build
            - save_cache:
                paths: [backend/node_modules]
                key: backend-build
    # Compile errors have been fixed, now onto the next
    test-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                keys: [frontend-test]
            # Your job code here
            - run:
                name: Run frontend test
                command: |
                    cd frontend
                    npm install
                    npm run test
            - save_cache:
                paths: [frontend/node_modules]
                key: frontend-test
                
    test-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                keys: [backend-test]
            # Your job code here
            - run:
                name: Run backend Test
                command: |
                    cd backend
                    npm install
                    npm run test
            - save_cache:
                paths: [backend/node_modules]
                key: backend-test
    # Test runs erros fixed
    scan-frontend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                keys: [scanfrontend-test]
            # Your job code here
            - run:
                name: scan frontend dependencies
                command: |
                    cd frontend
                    npm install
                    npm audit fix --audit-level=critical --force
                    npm audit fix --audit-level=critical --force
                    npm audit --audit-level=critical
            - save_cache:
                paths: [frontend/node_modules]
                key: scanfrontend-test

    scan-backend:
        docker:
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            # Restore from cache
            - restore_cache:
                keys: [scanbackend-test]
            # Your job code here
            - run:
                name: scan banckend dependencies
                command: |
                    cd backend
                    npm install
                    npm audit fix --audit-level=critical --force
                    npm audit fix --audit-level=critical --force
                    npm audit --audit-level=critical
            - save_cache:
                paths: [backend/node_modules]
                key: scanbackend-test
    # scan-test fixed
    deploy-infrastructure:
        docker:
            # Docker image here that supports AWS CLI
            - image: amazon/aws-cli
        steps:
            # Checkout code from git
            - checkout
            - run: yum install -y tar gzip
            - run:
                name: Ensure back-end infrastructure exists
                command: |
                    aws cloudformation deploy \
                    --template-file .circleci/files/backend.yml \
                    --tags project=udapeople \
                    --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
            - run:
                name: Ensure front-end infrastructure exist
                command: |
                    aws cloudformation deploy \
                    --template-file .circleci/files/frontend.yml \
                    --tags project=udapeople \
                    --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
            - run:
                name: Add back-end ip to ansible inventory
                command: |
                    aws ec2 describe-instances \
                    --query 'Reservations[*].Instances[*].PublicIpAddress' \
                    --filters "Name=tag:Project,Values=udacity" \
                    --output text >> .circleci/ansible/inventory.txt
            - persist_to_workspace:
                root: ~/
                paths:
                    - project/.circleci/ansible/inventory.txt
            - destroy-environment:
                workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    
    configure-infrastructure:
        docker:
            # Docker image here that supports Ansible
            - image: cimg/python:3.10
        steps:
            # Checkout code from git
            - checkout
            - install_awscli
            - install_ansible
            # Add ssh keys with fingerprint
            - add_ssh_keys:
                fingerprints: ["8b:70:db:e1:2d:2a:e2:c8:3b:36:f2:b6:2d:c0:6c:03"]
            # attach workspace
            - attach_workspace:
                at: ~/
            - run:
                name: Install dependencies
                command: |
                    apk add --update --no-cache ansible tar gzip aws-cli openssh
            - run:
                name: Configure server
                command: |
                    cd .circleci/ansible
                    cat inventory.txt
                    ansible-playbook -i inventory.txt configure-server.yml
            # Here's where you will add some code to rollback on failure
            - destroy-environment:
                workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    
    run-migrations:
        docker:
            # Docker image here that supports NodeJS
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            - restore_cache:
                keys: [backend-build]
            - run:
                name: Run migrations
                command: |
                    cd backend
                    npm install
                    npm run migrations > migrations_dump.txt
            - run:
                name: Send migration results to kvdb
                command: |
                    if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
                    then
                        curl https://kvdb.io/P2x5LqAaVSoq12YZEFJBor/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1' --insecure
                    fi
            # Here's where you will add some code to rollback on failure
            - destroy-environment:
                workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
            - revert-migrations
    
    deploy-frontend:
        docker:
            # Docker image here that supports AWS CLI
            - image: circleci/node:13.8.0
        steps:
            # Checkout code from git
            - checkout
            - attach_workspace:
                at: .
            - install_awscli
            - run:
                name: Install dependencies
                command: |
                    sudo apt update && sudo apt upgrade
                    sudo apt-get install python python-pip tar gzip
                    python -m pip install --user ansible
                    cd frontend
                    npm install
            - run:
                name: Get backend url
                command: |
                    # your code here
                    export BACKEND_IP=$(
                        aws ec2 describe-instances \
                        --query 'Reservations[*].Instances[*].PublicIpAddress' \
                        --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                        --output text
                    )
                    export API_URL="http://${BACKEND_IP}:3030"
                    echo "API_URL = ${API_URL}"
                    echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
                    cat frontend/.env
            - run:
                name: Deploy frontend objects
                command: |
                    cd frontend
                    npm install
                    npm run build
                    tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
                    aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            # Here's where you will add some code to rollback on failure
            - destroy-environment:
                workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
            - revert-migrations
    
    deploy-backend:
        docker:
            # Docker image here that supports Ansible
            - image: python:3.8-alpine3.15
        steps:
            # Checkout code from git
            - checkout
            # Add ssh keys with fingerprint
            - add_ssh_keys:
                fingerprints: ["8b:70:db:e1:2d:2a:e2:c8:3b:36:f2:b6:2d:c0:6c:03"]
            # attach workspace
            - attach_workspace:
                at: ~/
            - restore_cache:
                keys: [backend-build]
            - run:
                name: Install dependencies
                command: |
                    apk add --update --no-cache tar gzip nodejs npm aws-cli ansible
            - run:
                name: Deploy backend
                command: |
                    cd backend
                    npm i
                    npm run build
                    cd ..

                    # Zip the directory
                    tar -C backend -czvf artifact-build.tar.gz .
                    mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
                    mv artifact-build.tar.gz .circleci/ansible/roles/deploy/files/artifact-build.tar.gz

                    # go to ansible
                    cd .circleci/ansible
                    echo "Contents  of the inventory.txt file is -------"
                    cat inventory.txt
                    ansible-playbook -i inventory.txt deploy-backend.yml
            # Here's where you will add some code to rollback on failure
            - destroy-environment:
                workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
            - revert-migrations

workflows:
    default:
        jobs:
            - build-frontend
            - build-backend
            - test-frontend:
                requires: [build-frontend]
            - test-backend:
                requires: [build-backend]
            - scan-frontend:
                requires: [build-frontend]
            - scan-backend:
                requires: [build-backend]
            - deploy-infrastructure:
                requires: [test-frontend, test-backend, scan-frontend, scan-backend]
                filters:
                    branches:
                        only: [master]
            - configure-infrastructure:
                requires: [deploy-infrastructure]
            - run-migrations:
                requires: [configure-infrastructure]
            - deploy-frontend:
                requires: [run-migrations]
            - deploy-backend:
                requires: [run-migrations]