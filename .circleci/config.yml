version: 2.1

commands:

  install_awscli: 
    description: Instal AWS cli
    steps:
      - run:
          name: Install AWS cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install

  install_nodejs: 
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs

  install_ansible:
    description: Install Ansible
    steps:
      - run: 
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            set +e
            # Your code here
            aws s3 rm s3://udapeople-${UDACITY_USER_ID}-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflow_id>>"
            
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here   
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string 
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = $(curl --insecure "https://kvdb.io/${KVDB_BUCKET_ID}/migration_<<parameters.workflow_id>>")
            if(( $SUCCESS==1 )); 
            then
             cd ~/project/backend
             npm install
             # Add revert code here. You can find this in the Getting Started section.
             npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-cache-{{ checksum "frontend/package-lock.json" }}
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-cache-{{ checksum "frontend/package-lock.json" }}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: 
            - backend-cache-{{ checksum "backend/package-lock.json" }}
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-cache-{{ checksum "backend/package-lock.json" }}

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: 
            - frontend-cache-{{ checksum "frontend/package-lock.json" }}
      # Your job code here
      - run:
          name: Test Front end Code
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths:
            - "frontend/node_modules"
          key: frontend-cache-{{ checksum "frontend/package-lock.json" }}

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: 
            - backend-cache-{{ checksum "backend/package-lock.json" }}
      # Your job code here
      - run:
          name: Test backend Code
          command: |
            cd backend
            npm install
            npm run test

      - save_cache:
          paths: [backend/node_modules]
          key: backend-cache-{{ checksum "backend/package-lock.json" }}

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: 
            - frontend-cache-{{ checksum "frontend/package-lock.json" }}
      # Your job code here
      - run:
          name: front-end Scan
          command: |
             # Your code here
             cd frontend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: frontend-cache-{{ checksum "frontend/package-lock.json" }}

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: 
            - backend-cache-{{ checksum "backend/package-lock.json" }}
      # Your job code here
      - run:
          name: Back-end Scan
          command: |
             # Your code here
             cd backend
             npm install
             npm audit fix --audit-level=critical --force
             npm audit fix --audit-level=critical --force
             npm audit --audit-level=critical
      - save_cache:
          paths: [backend/node_modules]
          key: backend-cache-{{ checksum "backend/package-lock.json" }}

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install Dependencies
          command: |
            yum install -y tar gzip

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${UDACITY_USER_ID}-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople  

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            # Your code here
            cd .circleci/ansible
            cat inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} >> inventory.txt
            cat inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "cf:f2:2b:fc:3a:b6:d6:bd:08:f2:da:09:b8:67:a2:ab"
      # attach workspace
      - attach_workspace:
          at: ~/

      - install_ansible
      - install_awscli
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            cat inventory.txt

            ansible-playbook -i inventory.txt configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/python:3.10
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys:
            - backend-cache-{{ checksum "backend/package-lock.json" }}
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      
      - save_cache:
          paths: [backend/node_modules]
          key: backend-cache-{{ checksum "backend/package-lock.json" }} 

      - run:
          name: Send migration results to kvdb
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/${KVDB_BUCKET_ID}/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - revert-migrations:
           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "cf:f2:2b:fc:3a:b6:d6:bd:08:f2:da:09:b8:67:a2:ab"
      # attach workspace
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: 
            - frontend-cache

      - install_nodejs
      - install_awscli
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --output text
            )
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
            # tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${UDACITY_USER_ID}-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      # Here's where you will add some code to rollback on failure      
      - destroy-environment 
      - revert-migrations

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_nodejs
      - install_ansible
      - install_awscli
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints:
            - "cf:f2:2b:fc:3a:b6:d6:bd:08:f2:da:09:b8:67:a2:ab"
      # attach workspace
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-cache]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files/
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
            ls .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -vvv -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure            
      - destroy-environment 
      - revert-migrations

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install_nodejs
      - install_awscli
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filter Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
              
            export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
            echo ${API_URL}
            if curl --connect-timeout 60 $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
           # your code here
            URL="http://udapeople-${UDACITY_USER_ID}-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"            
            echo $URL 
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              exit 0
            else
              exit 1
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment 
      - revert-migrations
  
  cloudfront-update:
      docker:
        - image: cimg/base:stable
        # - image: circleci/node:13.8.0
        # - image: alpine:latest
      steps:
        - checkout
        - install_awscli
        - install_nodejs
        - run:
            name: Install dependencies
            command: |
              sudo apt-get update -y
              sudo apt install -y curl
        - run:
            name: Save Old Workflow ID to kvdb.io
            command: |
              export OLD_WORKFLOW_ID=$(aws cloudformation \
                list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
              echo "Old Workflow ID: $OLD_WORKFLOW_ID"
              curl https://kvdb.io/${KVDB_BUCKET_ID}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
        - run:
            name: Update cloudfront distribution
            command: |
              aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
              echo Current Workflow ID: "${CIRCLE_WORKFLOW_ID:0:7}"
            # rolls back should migration fail
        - destroy-environment
            # workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
        - revert-migrations
            # workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
    docker:                                                                           
      - image: cimg/base:stable 
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
            export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET_ID}/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi

  configure-node-exporter:
    docker:
      # - image: amazon/aws-cli
      - image: cimg/python:3.10    # testing another image
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - add_ssh_keys:
          fingerprints: ["8b:70:db:e1:2d:2a:e2:c8:3b:36:f2:b6:2d:c0:6c:03"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure node_exporter
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook configure-prometheus-node-exporter.yml -i inventory.txt

  deploy-prometheus-server:
    docker:
      # - image: amazon/aws-cli
      - image: cimg/python:3.10  # Testing another image
    steps:
      - checkout
      - install_ansible
      - install_awscli
      - add_ssh_keys:
          fingerprints: ["8b:70:db:e1:2d:2a:e2:c8:3b:36:f2:b6:2d:c0:6c:03"]
      - attach_workspace:
          at: ~/
      - run:
          name: Spin up EC2 server for prometheus
          command: |
            echo "[server]" >> .circleci/ansible/inventory.txt
            aws cloudformation deploy \
              --template-file .circleci/files/prometheus-server.yml \
              --tags project=prometheus \
              --stack-name udapeople-prometheus-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Append IP to inventory file
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=prometheus" \
            --output text >> .circleci/ansible/inventory.txt
      - run:
          name: Install prometheus and alertmanager on server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-prometheus-alertmanager.yml  
          
          
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
      # - configure-node-exporter:
      #     requires: [smoke-test]
      # - deploy-prometheus-server:
      #     requires: [configure-node-exporter]